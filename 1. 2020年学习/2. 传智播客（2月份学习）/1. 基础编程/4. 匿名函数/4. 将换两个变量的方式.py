#原来方法
a = 4
b = 3

"""
#第一种
c = 0
c = a
a = b
b = c
print("a=%d, b=%d"%(a,b))


#第二种，不用第三个变量
a = a+b
b = a-b
a = a-b

print("a=%d, b=%d"%(a,b))
"""

#第三种方法（只有python中有）
a,b = b,a
print("a=%d, b=%d"%(a,b))

##########知识点扩充#######################
#a = 100
a = [100]
def test(num): #num如果指向的是可变数据类型，就可以修改，如果不是可变数据类型，就不能修改
    num += num #如果num指向的是可变数据类型，就是直接对数据进行修改，如果不是就是找一个新的变量指向那个数据
    print(num)
test(a)
print(a)

#区别理解
a = [100]
def test(num):
    #num += num
    num = num + num #[100] + [100] =======>[100, 100]
    print(num)
test(a)
print(a)
#num += num 实际上是对指向的a的地址里的变量进行修改，相当于a指向的那个地址的内容[100]被修改为了[100, 100]（前提是指向地址里的内容能修改）
#num = num + num 先计算等号右边，然后让num指向那个新的值的地址，所以a指向的那个地址里的列表并没有发生变化还是[100]

#总结
#num += num 不等于num = num + num , 如果是数字甚至是结果相同，因为python中不是和 C 和C++里面一样值赋值，而是引用
