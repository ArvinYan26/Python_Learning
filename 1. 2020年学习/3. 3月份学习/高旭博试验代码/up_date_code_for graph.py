import numpy as np
import igraph
from igraph import Graph, mean
import networkx as nx
import random
import scipy as sp
import matplotlib.pyplot as plt
import math


class SilvaModel:

    def __init__(self,
                 A: np.ndarray, K: int,
                 lambd: float = 0.6,
                 Delta: float = 0.07,
                 epsilon: float = 0.05,
                 omega: (float, float) = (0, 1)):

        assert A.ndim == 2
        assert A.shape[0] == A.shape[1]
        assert K > 1
        assert lambd >= 0
        assert Delta >= 0
        assert epsilon >= 0
        assert len(omega) == 2 and omega[0] < omega[1]

        self._A = A
        self._V = A.shape[0]  # number of vertices
        self._K = K
        self._lambd = lambd
        self._Delta = Delta
        self._epsilon = epsilon
        self._omega = omega

        # Initialize the position of each particle.
        self._p = np.random.randint(self._V, size=self._K)
        # print(self._p)

        self._Prand = A / A.sum(axis=1, keepdims=True)
        # print(self._Prand)

        self._N = np.ones((self._V, self._K))
        for k in range(self._K):
            self._N[self._p[k], k] = 2
        # print(self._N)

        # Calculate the dominance value.
        self._Nbar = self._N / self._N.sum(axis=1, keepdims=True)
        # print(self._Nbar)

        self._Nbar_diff_norm = np.inf

        self._E = np.full(self._K, self._omega[0] +
                          (self._omega[1] - self._omega[0]) / self._K)
        # print(self._E)

    def iterate(self):

        next_position = np.zeros(self._K, dtype=int)
        # print(self._E)

        for k in range(self._K):
            Ppref = 1.0 * self._A
            for j in range(self._V):
                Ppref[:, j] = Ppref[:, j] * self._Nbar[j, k]
            Ppref = np.copy(Ppref) / Ppref.sum(axis=1, keepdims=True)

            Prean = 1.0 * np.zeros((self._V, self._V))
            # XXX: this is an implementation detail. It is not described in the
            # paper.
            dominated = np.where(
                self._Nbar[:, k] == np.max(self._Nbar, axis=1))
            for u in dominated:
                Prean[:, u] = 1.0
            Prean = np.copy(Prean) / Prean.sum(axis=1, keepdims=True)

            S = 0 if self._E[k] > self._omega[0] else 1

            P = (1 - S) * (self._lambd * Ppref + (1 - self._lambd) *
                           self._Prand) + S * Prean

            next_position[k] = np.random.choice(self._V, p=P[self._p[k], :])
            # print("particle {} went from {} to {}.".format(k, self._p[k],
            #                                                next_position[k]))

        for k in range(self._K):
            self._N[next_position[k], k] = self._N[next_position[k], k] + 1
            self._p[k] = next_position[k]

            is_dominated = self._Nbar[next_position[k], k] == np.max(
                self._Nbar[next_position[k], :])

            self._E[k] = np.clip(self._E[k] +
                                 (1.0 if is_dominated else -
                                 1.0) *
                                 self._Delta, self._omega[0], self._omega[1])

        next_Nbar = self._N / self._N.sum(axis=1, keepdims=True)
        self._Nbar_diff_norm = np.linalg.norm(next_Nbar - self._Nbar,
                                              ord=np.inf)
        self._Nbar = next_Nbar

        # print(self._Nbar_diff_norm)

    def has_converged(self) -> bool:
        return self._Nbar_diff_norm < self._epsilon

    def result(self) -> np.ndarray:
        return np.copy(self._Nbar)


if __name__ == "__main__":

    # A = np.array(
    #    [[0, 1, 1, 0, 0, 0],
    #    [1, 0, 1, 0, 0, 0],
    #   [1, 1, 0, 1, 0, 0],
    #  [0, 0, 1, 0, 1, 1],
    # [0, 0, 0, 1, 0, 1],
    # [0, 0, 0, 1, 1, 0]])

    NETWORK_SIZE = 128
    # PROBABILITY_OF_EAGE=0.8  #Limited to global
    pout = 0.3
    pin = 1 - pout
    # pout=0.01

    zin = 0
    zout = 0
    ztotal = 0
    K = 16
    M = 4  # Community Number
    g = int(NETWORK_SIZE / M)  # Community Size
    Amatrix = [[0 for i in range(NETWORK_SIZE)] for i in range(NETWORK_SIZE)]
    # def generateRandomNetwork()é”?
    for i in range(0, NETWORK_SIZE):
        for j in range(i, NETWORK_SIZE):
            Amatrix[i][j] = Amatrix[j][i] = 0

    intvl = int(NETWORK_SIZE / M)
    bgIntvl = 0
    endIntvl = intvl - 1
    print(endIntvl)

    # INTRAcommunity

    # for i in range(bgIntvl,endIntvl):
    #   for j in range(bgIntvl,endIntvl):
    while (ztotal * 2 / NETWORK_SIZE < K):
        # intra-community
        for m in range(M):
            v1 = random.randint(m * intvl, (m + 1) * intvl - 1)
            v2 = random.randint(m * intvl, (m + 1) * intvl - 1)

            if (v1 == v2):
                continue
            # if (zin/NETWORK_SIZE< K):
            probability = np.random.random()
            if (probability <= pin):
                if (Amatrix[v1][v2] == 0):
                    # zin = zin + 1
                    Amatrix[v1][v2] = Amatrix[v2][v1] = 1
                    zin = zin + 1
            # if(m==M):
            # m=1
        # inter-community

        keepWalking = True
        while (keepWalking):
            v3 = random.randint(0, NETWORK_SIZE - 1)
            v4 = random.randint(0, NETWORK_SIZE - 1)
            if (math.floor(v3 / intvl) != math.floor(v4 / intvl)):  # Same community?
                keepWalking = False  # If so, move on (If not, choose new 2-random nodes: keep on While)
        probability = np.random.random()
        if (probability <= pout):
            if (Amatrix[v3][v4] == 0):
                Amatrix[v3][v4] = Amatrix[v4][v3] = 1
                zout = zout + 1
                # zout = zout + 1
        ztotal = zin + zout
    print(ztotal * 2 / NETWORK_SIZE)
    print(zout / K / NETWORK_SIZE)
    print(zout / NETWORK_SIZE / K / 0.5)
    print(zin / K / NETWORK_SIZE)
    print(zin * 2 / NETWORK_SIZE / K)

    # Print the Adjancency Matrix
    plt.figure(1)
    plt.imshow(Amatrix)
    plt.savefig('blkwht.png')
    plt.show()
    plt.figure(2)
    G = nx.Graph()

    # Connection Creator
    for i in range(len(Amatrix)):
        for j in range(len(Amatrix)):
            if (Amatrix[i][j] == 1):
                G.add_edge(i, j)
    print(nx.is_connected(G))
    degrees = G.degree()
    print(mean(degrees.values()))
    # sum_of_edges = sum(degrees.values())
    print(ztotal)
    # average_degree=mean(G.degree())
    # print(G.degree())
    # print("AVG DEGREE")
    # print(average_degree)

    pos = nx.spring_layout(G)
    for m in range(M):
        nx.draw_networkx_nodes(G, pos,
                               nodelist=[i for i in range(m * intvl, (m + 1) * intvl)],
                               node_color='b')

    nx.draw_networkx_edges(G, pos)

    # expectedVector = [0 for i in range(NETWORK_SIZE)]
    expectedVector = np.zeros(NETWORK_SIZE, dtype=int)
    for m in range(M):
        for i in range(m * intvl, (m + 1) * intvl):
            expectedVector[i] = m

    # nx.draw(G)
    plt.show()
    print(G)
    print("end")
    A = np.array(Amatrix)
    model = SilvaModel(A, 4)
    accuracy_list = []
    domin_level = []
    domin_level_of_node5 = []
    domin_level_of_node100 = []
    domin_level_of_particle2_to_node5 = []
    for t in range(50000):
        model.iterate()
        if ((t + 1) % 100 == 0):
            resultVector = np.argmax(model.result(), axis=1)
            resultVector = resultVector.tolist()
            print(t)
            m_t = 0
            for m in range(M):
                list1 = resultVector[m * intvl:(m + 1) * intvl]
                count_times = []
                for i in list1:
                    count_times.append(list1.count(i))
                    m = max(count_times)
                m_t = m_t + m
            accuracy = m_t / NETWORK_SIZE
            print(accuracy)
            accuracy_list.append(accuracy)
            domin_level = model.result()
            domin_level_of_node5.append(domin_level[4])
            domin_level_of_node100.append(domin_level[99])
            print(domin_level[99])
    a1 = np.array(domin_level_of_node5)
    b1 = a1.T
    domin_level_of_particle1_to_node5 = b1[0]
    domin_level_of_particle2_to_node5 = b1[1]
    domin_level_of_particle3_to_node5 = b1[2]
    domin_level_of_particle4_to_node5 = b1[3]
    print(domin_level_of_particle2_to_node5)

    a2 = np.array(domin_level_of_node100)
    b2 = a2.T
    domin_level_of_particle1_to_node100 = b2[0]
    domin_level_of_particle2_to_node100 = b2[1]
    domin_level_of_particle3_to_node100 = b2[2]
    domin_level_of_particle4_to_node100 = b2[3]
    print(domin_level_of_particle4_to_node100)

    print(accuracy_list)
    print(domin_level)
    # print(domin_level_of_node5)
    # print(domin_level_of_node100)

    '''
    model = SilvaModel(A, 4)
    for t in range(900):
        model.iterate()

    while not model.has_converged():
        model.iterate()

    print(model.result())
    resultVector = np.argmax(model.result(), axis=1)
    print(expectedVector)
    print(resultVector)
    resultVector = resultVector.tolist()

    #print(resultVector[1:10])
    m_t=0
    for m in range(M):
        list1=resultVector[m*intvl:(m+1)*intvl]
        count_times = []
        for i in list1:
            count_times.append(list1.count(i))
            m = max(count_times)
        m_t=m_t+m
    print(list1)
    print(m_t)
    accuracy=m_t/NETWORK_SIZE
    print(accuracy)   
    '''

    '''
    accuracy_list=[]
    for i in range(30):
        model = SilvaModel(A, 4)
        for t in range(100):
            model.iterate()
        while not model.has_converged():
            model.iterate()
        resultVector = np.argmax(model.result(), axis=1)
        resultVector = resultVector.tolist()
        m_t=0
        for m in range(M):
            list1=resultVector[m*intvl:(m+1)*intvl]
            count_times = []
            for i in list1:
                count_times.append(list1.count(i))
                m = max(count_times)
            m_t=m_t+m
        accuracy=m_t/NETWORK_SIZE
        print(accuracy)
        #accuracy=0
        #m_t=0
        accuracy_list.append(accuracy)
    print(accuracy_list)
    total_accuracy = 0
    for i in range(len(accuracy_list)):
        total_accuracy += accuracy_list[i]
    average_accuracy=total_accuracy/len(accuracy_list)
    print (average_accuracy)
    '''
    '''
    plt.figure(3)
    t = [200,400,600,800,1000,1200,1400,1600,1800,2000,2200,2400,2600,2800,3000,3200,3400,3600,3800,4000,4200,4400,4600,4800,5000]
    accuracy_rate = [0.79,0.64,0.73,0.69,0.65,0.89,0.65,0.9,0.66,0.88,0.93,0.9,0.97,0.75,0.93,0.98,0.96,0.99,0.88,0.81,0.92,0.92,0.71,0.97,0.98]
    plt.plot(t,accuracy_rate,'g^',linestyle='--')
    plt.xlabel('iteration Time')
    plt.ylabel('accuracy rate')
    plt.title('Result analysis')
    plt.show()


    plt.figure(4)
    P_Out = [0,0.02,0.04,0.06,0.08,0.1,0.12,0.14,0.16,0.18,0.2,0.22,0.24,0.26,0.28,0.3,0.32,0.34,0.36,0.38,0.4,0.42,0.44,0.46,0.48,0.5]
    accuracy_rate2 = [1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.98,0.98,0.98,0.97,0.97,0.94,0.93,0.92,0.83,0.91,0.89,0.81,0.84,0.83,0.74,0.68,0.61]
    plt.plot(P_Out,accuracy_rate2,'g^',linestyle='-.')
    plt.xlabel('Pout')
    plt.ylabel('accuracy rate')
    plt.title('Result analysis')
    plt.show()
    # Analyse ResultVector
    #print(np.max(resultVector))
    '''
    plt.figure(3)
    # t1=[100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600,1700,1800,1900,2000,2100,2200,2300,2400,2500,2600,2700,2800,2900,3000,3100,3200,3300,3400,3500,3600,3700,3800,3900,4000,4100,4200,4300,4400,4500,4600,4700,4800,4900,5000,5100,5200,5300,5400,5500,5600,5700,5800,5900,6000,6100,6200,6300,6400,6500,6600,6700,6800,6900,7000,7100,7200,7300,7400,7500,7600,7700,7800,7900,8000,8100,8200,8300,8400,8500,8600,8700,8800,8900,9000,9100,9200,9300,9400,9500,9600,9700,9800,9900,10000,10100,10200,10300,10400,10500,10600,10700,10800,10900,11000,11100,11200,11300,11400,11500,11600,11700,11800,11900,12000,12100,12200,12300,12400,12500,12600,12700,12800,12900,13000,13100,13200,13300,13400,13500,13600,13700,13800,13900,14000,14100,14200,14300,14400,14500,14600,14700,14800,14900,15000,15100,15200,15300,15400,15500,15600,15700,15800,15900,16000,16100,16200,16300,16400,16500,16600,16700,16800,16900,17000,17100,17200,17300,17400,17500,17600,17700,17800,17900,18000,18100,18200,18300,18400,18500,18600,18700,18800,18900,19000,19100,19200,19300,19400,19500,19600,19700,19800,19900,20000]
    # t=[100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600,1700,1800,1900,2000,2100,2200,2300,2400,2500,2600,2700,2800,2900,3000,3100,3200,3300,3400,3500,3600,3700,3800,3900,4000,4100,4200,4300,4400,4500,4600,4700,4800,4900,5000,5100,5200,5300,5400,5500,5600,5700,5800,5900,6000,6100,6200,6300,6400,6500,6600,6700,6800,6900,7000,7100,7200,7300,7400,7500,7600,7700,7800,7900,8000,8100,8200,8300,8400,8500,8600,8700,8800,8900,9000,9100,9200,9300,9400,9500,9600,9700,9800,9900,10000]
    t2 = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000,
          2100, 2200, 2300, 2400, 2500, 2600, 2700, 2800, 2900, 3000, 3100, 3200, 3300, 3400, 3500, 3600, 3700, 3800,
          3900, 4000, 4100, 4200, 4300, 4400, 4500, 4600, 4700, 4800, 4900, 5000, 5100, 5200, 5300, 5400, 5500, 5600,
          5700, 5800, 5900, 6000, 6100, 6200, 6300, 6400, 6500, 6600, 6700, 6800, 6900, 7000, 7100, 7200, 7300, 7400,
          7500, 7600, 7700, 7800, 7900, 8000, 8100, 8200, 8300, 8400, 8500, 8600, 8700, 8800, 8900, 9000, 9100, 9200,
          9300, 9400, 9500, 9600, 9700, 9800, 9900, 10000, 10100, 10200, 10300, 10400, 10500, 10600, 10700, 10800,
          10900, 11000, 11100, 11200, 11300, 11400, 11500, 11600, 11700, 11800, 11900, 12000, 12100, 12200, 12300,
          12400, 12500, 12600, 12700, 12800, 12900, 13000, 13100, 13200, 13300, 13400, 13500, 13600, 13700, 13800,
          13900, 14000, 14100, 14200, 14300, 14400, 14500, 14600, 14700, 14800, 14900, 15000, 15100, 15200, 15300,
          15400, 15500, 15600, 15700, 15800, 15900, 16000, 16100, 16200, 16300, 16400, 16500, 16600, 16700, 16800,
          16900, 17000, 17100, 17200, 17300, 17400, 17500, 17600, 17700, 17800, 17900, 18000, 18100, 18200, 18300,
          18400, 18500, 18600, 18700, 18800, 18900, 19000, 19100, 19200, 19300, 19400, 19500, 19600, 19700, 19800,
          19900, 20000, 20100, 20200, 20300, 20400, 20500, 20600, 20700, 20800, 20900, 21000, 21100, 21200, 21300,
          21400, 21500, 21600, 21700, 21800, 21900, 22000, 22100, 22200, 22300, 22400, 22500, 22600, 22700, 22800,
          22900, 23000, 23100, 23200, 23300, 23400, 23500, 23600, 23700, 23800, 23900, 24000, 24100, 24200, 24300,
          24400, 24500, 24600, 24700, 24800, 24900, 25000, 25100, 25200, 25300, 25400, 25500, 25600, 25700, 25800,
          25900, 26000, 26100, 26200, 26300, 26400, 26500, 26600, 26700, 26800, 26900, 27000, 27100, 27200, 27300,
          27400, 27500, 27600, 27700, 27800, 27900, 28000, 28100, 28200, 28300, 28400, 28500, 28600, 28700, 28800,
          28900, 29000, 29100, 29200, 29300, 29400, 29500, 29600, 29700, 29800, 29900, 30000, 30100, 30200, 30300,
          30400, 30500, 30600, 30700, 30800, 30900, 31000, 31100, 31200, 31300, 31400, 31500, 31600, 31700, 31800,
          31900, 32000, 32100, 32200, 32300, 32400, 32500, 32600, 32700, 32800, 32900, 33000, 33100, 33200, 33300,
          33400, 33500, 33600, 33700, 33800, 33900, 34000, 34100, 34200, 34300, 34400, 34500, 34600, 34700, 34800,
          34900, 35000, 35100, 35200, 35300, 35400, 35500, 35600, 35700, 35800, 35900, 36000, 36100, 36200, 36300,
          36400, 36500, 36600, 36700, 36800, 36900, 37000, 37100, 37200, 37300, 37400, 37500, 37600, 37700, 37800,
          37900, 38000, 38100, 38200, 38300, 38400, 38500, 38600, 38700, 38800, 38900, 39000, 39100, 39200, 39300,
          39400, 39500, 39600, 39700, 39800, 39900, 40000, 40100, 40200, 40300, 40400, 40500, 40600, 40700, 40800,
          40900, 41000, 41100, 41200, 41300, 41400, 41500, 41600, 41700, 41800, 41900, 42000, 42100, 42200, 42300,
          42400, 42500, 42600, 42700, 42800, 42900, 43000, 43100, 43200, 43300, 43400, 43500, 43600, 43700, 43800,
          43900, 44000, 44100, 44200, 44300, 44400, 44500, 44600, 44700, 44800, 44900, 45000, 45100, 45200, 45300,
          45400, 45500, 45600, 45700, 45800, 45900, 46000, 46100, 46200, 46300, 46400, 46500, 46600, 46700, 46800,
          46900, 47000, 47100, 47200, 47300, 47400, 47500, 47600, 47700, 47800, 47900, 48000, 48100, 48200, 48300,
          48400, 48500, 48600, 48700, 48800, 48900, 49000, 49100, 49200, 49300, 49400, 49500, 49600, 49700, 49800,
          49900, 50000]
    accuracy = accuracy_list
    plt.plot(t2, accuracy, '.', linestyle='--')
    plt.xlabel('iteration Time')
    plt.ylabel('accuracy rate')
    plt.title('Result analysis')
    plt.show()

    plt.figure(4)
    # t1=[100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600,1700,1800,1900,2000,2100,2200,2300,2400,2500,2600,2700,2800,2900,3000,3100,3200,3300,3400,3500,3600,3700,3800,3900,4000,4100,4200,4300,4400,4500,4600,4700,4800,4900,5000,5100,5200,5300,5400,5500,5600,5700,5800,5900,6000,6100,6200,6300,6400,6500,6600,6700,6800,6900,7000,7100,7200,7300,7400,7500,7600,7700,7800,7900,8000,8100,8200,8300,8400,8500,8600,8700,8800,8900,9000,9100,9200,9300,9400,9500,9600,9700,9800,9900,10000,10100,10200,10300,10400,10500,10600,10700,10800,10900,11000,11100,11200,11300,11400,11500,11600,11700,11800,11900,12000,12100,12200,12300,12400,12500,12600,12700,12800,12900,13000,13100,13200,13300,13400,13500,13600,13700,13800,13900,14000,14100,14200,14300,14400,14500,14600,14700,14800,14900,15000,15100,15200,15300,15400,15500,15600,15700,15800,15900,16000,16100,16200,16300,16400,16500,16600,16700,16800,16900,17000,17100,17200,17300,17400,17500,17600,17700,17800,17900,18000,18100,18200,18300,18400,18500,18600,18700,18800,18900,19000,19100,19200,19300,19400,19500,19600,19700,19800,19900,20000]
    # t=[100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600,1700,1800,1900,2000,2100,2200,2300,2400,2500,2600,2700,2800,2900,3000,3100,3200,3300,3400,3500,3600,3700,3800,3900,4000,4100,4200,4300,4400,4500,4600,4700,4800,4900,5000,5100,5200,5300,5400,5500,5600,5700,5800,5900,6000,6100,6200,6300,6400,6500,6600,6700,6800,6900,7000,7100,7200,7300,7400,7500,7600,7700,7800,7900,8000,8100,8200,8300,8400,8500,8600,8700,8800,8900,9000,9100,9200,9300,9400,9500,9600,9700,9800,9900,10000]
    t2 = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000,
          2100, 2200, 2300, 2400, 2500, 2600, 2700, 2800, 2900, 3000, 3100, 3200, 3300, 3400, 3500, 3600, 3700, 3800,
          3900, 4000, 4100, 4200, 4300, 4400, 4500, 4600, 4700, 4800, 4900, 5000, 5100, 5200, 5300, 5400, 5500, 5600,
          5700, 5800, 5900, 6000, 6100, 6200, 6300, 6400, 6500, 6600, 6700, 6800, 6900, 7000, 7100, 7200, 7300, 7400,
          7500, 7600, 7700, 7800, 7900, 8000, 8100, 8200, 8300, 8400, 8500, 8600, 8700, 8800, 8900, 9000, 9100, 9200,
          9300, 9400, 9500, 9600, 9700, 9800, 9900, 10000, 10100, 10200, 10300, 10400, 10500, 10600, 10700, 10800,
          10900, 11000, 11100, 11200, 11300, 11400, 11500, 11600, 11700, 11800, 11900, 12000, 12100, 12200, 12300,
          12400, 12500, 12600, 12700, 12800, 12900, 13000, 13100, 13200, 13300, 13400, 13500, 13600, 13700, 13800,
          13900, 14000, 14100, 14200, 14300, 14400, 14500, 14600, 14700, 14800, 14900, 15000, 15100, 15200, 15300,
          15400, 15500, 15600, 15700, 15800, 15900, 16000, 16100, 16200, 16300, 16400, 16500, 16600, 16700, 16800,
          16900, 17000, 17100, 17200, 17300, 17400, 17500, 17600, 17700, 17800, 17900, 18000, 18100, 18200, 18300,
          18400, 18500, 18600, 18700, 18800, 18900, 19000, 19100, 19200, 19300, 19400, 19500, 19600, 19700, 19800,
          19900, 20000, 20100, 20200, 20300, 20400, 20500, 20600, 20700, 20800, 20900, 21000, 21100, 21200, 21300,
          21400, 21500, 21600, 21700, 21800, 21900, 22000, 22100, 22200, 22300, 22400, 22500, 22600, 22700, 22800,
          22900, 23000, 23100, 23200, 23300, 23400, 23500, 23600, 23700, 23800, 23900, 24000, 24100, 24200, 24300,
          24400, 24500, 24600, 24700, 24800, 24900, 25000, 25100, 25200, 25300, 25400, 25500, 25600, 25700, 25800,
          25900, 26000, 26100, 26200, 26300, 26400, 26500, 26600, 26700, 26800, 26900, 27000, 27100, 27200, 27300,
          27400, 27500, 27600, 27700, 27800, 27900, 28000, 28100, 28200, 28300, 28400, 28500, 28600, 28700, 28800,
          28900, 29000, 29100, 29200, 29300, 29400, 29500, 29600, 29700, 29800, 29900, 30000, 30100, 30200, 30300,
          30400, 30500, 30600, 30700, 30800, 30900, 31000, 31100, 31200, 31300, 31400, 31500, 31600, 31700, 31800,
          31900, 32000, 32100, 32200, 32300, 32400, 32500, 32600, 32700, 32800, 32900, 33000, 33100, 33200, 33300,
          33400, 33500, 33600, 33700, 33800, 33900, 34000, 34100, 34200, 34300, 34400, 34500, 34600, 34700, 34800,
          34900, 35000, 35100, 35200, 35300, 35400, 35500, 35600, 35700, 35800, 35900, 36000, 36100, 36200, 36300,
          36400, 36500, 36600, 36700, 36800, 36900, 37000, 37100, 37200, 37300, 37400, 37500, 37600, 37700, 37800,
          37900, 38000, 38100, 38200, 38300, 38400, 38500, 38600, 38700, 38800, 38900, 39000, 39100, 39200, 39300,
          39400, 39500, 39600, 39700, 39800, 39900, 40000, 40100, 40200, 40300, 40400, 40500, 40600, 40700, 40800,
          40900, 41000, 41100, 41200, 41300, 41400, 41500, 41600, 41700, 41800, 41900, 42000, 42100, 42200, 42300,
          42400, 42500, 42600, 42700, 42800, 42900, 43000, 43100, 43200, 43300, 43400, 43500, 43600, 43700, 43800,
          43900, 44000, 44100, 44200, 44300, 44400, 44500, 44600, 44700, 44800, 44900, 45000, 45100, 45200, 45300,
          45400, 45500, 45600, 45700, 45800, 45900, 46000, 46100, 46200, 46300, 46400, 46500, 46600, 46700, 46800,
          46900, 47000, 47100, 47200, 47300, 47400, 47500, 47600, 47700, 47800, 47900, 48000, 48100, 48200, 48300,
          48400, 48500, 48600, 48700, 48800, 48900, 49000, 49100, 49200, 49300, 49400, 49500, 49600, 49700, 49800,
          49900, 50000]
    domin_level1 = domin_level_of_particle1_to_node5
    domin_level2 = domin_level_of_particle2_to_node5
    domin_level3 = domin_level_of_particle3_to_node5
    domin_level4 = domin_level_of_particle4_to_node5
    plt.plot(t2, domin_level1, '.', label='particle1')
    plt.plot(t2, domin_level2, '.', label='particle2')
    plt.plot(t2, domin_level3, '.', label='particle3')
    plt.plot(t2, domin_level4, '.', label='particle4')
    plt.legend()
    plt.xlabel('iteration Time')
    plt.ylabel('Domin level')
    plt.title('Domin level analysis of node5')
    plt.show()

    plt.figure(5)
    # t1=[100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600,1700,1800,1900,2000,2100,2200,2300,2400,2500,2600,2700,2800,2900,3000,3100,3200,3300,3400,3500,3600,3700,3800,3900,4000,4100,4200,4300,4400,4500,4600,4700,4800,4900,5000,5100,5200,5300,5400,5500,5600,5700,5800,5900,6000,6100,6200,6300,6400,6500,6600,6700,6800,6900,7000,7100,7200,7300,7400,7500,7600,7700,7800,7900,8000,8100,8200,8300,8400,8500,8600,8700,8800,8900,9000,9100,9200,9300,9400,9500,9600,9700,9800,9900,10000,10100,10200,10300,10400,10500,10600,10700,10800,10900,11000,11100,11200,11300,11400,11500,11600,11700,11800,11900,12000,12100,12200,12300,12400,12500,12600,12700,12800,12900,13000,13100,13200,13300,13400,13500,13600,13700,13800,13900,14000,14100,14200,14300,14400,14500,14600,14700,14800,14900,15000,15100,15200,15300,15400,15500,15600,15700,15800,15900,16000,16100,16200,16300,16400,16500,16600,16700,16800,16900,17000,17100,17200,17300,17400,17500,17600,17700,17800,17900,18000,18100,18200,18300,18400,18500,18600,18700,18800,18900,19000,19100,19200,19300,19400,19500,19600,19700,19800,19900,20000]
    # t=[100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600,1700,1800,1900,2000,2100,2200,2300,2400,2500,2600,2700,2800,2900,3000,3100,3200,3300,3400,3500,3600,3700,3800,3900,4000,4100,4200,4300,4400,4500,4600,4700,4800,4900,5000,5100,5200,5300,5400,5500,5600,5700,5800,5900,6000,6100,6200,6300,6400,6500,6600,6700,6800,6900,7000,7100,7200,7300,7400,7500,7600,7700,7800,7900,8000,8100,8200,8300,8400,8500,8600,8700,8800,8900,9000,9100,9200,9300,9400,9500,9600,9700,9800,9900,10000]
    t2 = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000,
          2100, 2200, 2300, 2400, 2500, 2600, 2700, 2800, 2900, 3000, 3100, 3200, 3300, 3400, 3500, 3600, 3700, 3800,
          3900, 4000, 4100, 4200, 4300, 4400, 4500, 4600, 4700, 4800, 4900, 5000, 5100, 5200, 5300, 5400, 5500, 5600,
          5700, 5800, 5900, 6000, 6100, 6200, 6300, 6400, 6500, 6600, 6700, 6800, 6900, 7000, 7100, 7200, 7300, 7400,
          7500, 7600, 7700, 7800, 7900, 8000, 8100, 8200, 8300, 8400, 8500, 8600, 8700, 8800, 8900, 9000, 9100, 9200,
          9300, 9400, 9500, 9600, 9700, 9800, 9900, 10000, 10100, 10200, 10300, 10400, 10500, 10600, 10700, 10800,
          10900, 11000, 11100, 11200, 11300, 11400, 11500, 11600, 11700, 11800, 11900, 12000, 12100, 12200, 12300,
          12400, 12500, 12600, 12700, 12800, 12900, 13000, 13100, 13200, 13300, 13400, 13500, 13600, 13700, 13800,
          13900, 14000, 14100, 14200, 14300, 14400, 14500, 14600, 14700, 14800, 14900, 15000, 15100, 15200, 15300,
          15400, 15500, 15600, 15700, 15800, 15900, 16000, 16100, 16200, 16300, 16400, 16500, 16600, 16700, 16800,
          16900, 17000, 17100, 17200, 17300, 17400, 17500, 17600, 17700, 17800, 17900, 18000, 18100, 18200, 18300,
          18400, 18500, 18600, 18700, 18800, 18900, 19000, 19100, 19200, 19300, 19400, 19500, 19600, 19700, 19800,
          19900, 20000, 20100, 20200, 20300, 20400, 20500, 20600, 20700, 20800, 20900, 21000, 21100, 21200, 21300,
          21400, 21500, 21600, 21700, 21800, 21900, 22000, 22100, 22200, 22300, 22400, 22500, 22600, 22700, 22800,
          22900, 23000, 23100, 23200, 23300, 23400, 23500, 23600, 23700, 23800, 23900, 24000, 24100, 24200, 24300,
          24400, 24500, 24600, 24700, 24800, 24900, 25000, 25100, 25200, 25300, 25400, 25500, 25600, 25700, 25800,
          25900, 26000, 26100, 26200, 26300, 26400, 26500, 26600, 26700, 26800, 26900, 27000, 27100, 27200, 27300,
          27400, 27500, 27600, 27700, 27800, 27900, 28000, 28100, 28200, 28300, 28400, 28500, 28600, 28700, 28800,
          28900, 29000, 29100, 29200, 29300, 29400, 29500, 29600, 29700, 29800, 29900, 30000, 30100, 30200, 30300,
          30400, 30500, 30600, 30700, 30800, 30900, 31000, 31100, 31200, 31300, 31400, 31500, 31600, 31700, 31800,
          31900, 32000, 32100, 32200, 32300, 32400, 32500, 32600, 32700, 32800, 32900, 33000, 33100, 33200, 33300,
          33400, 33500, 33600, 33700, 33800, 33900, 34000, 34100, 34200, 34300, 34400, 34500, 34600, 34700, 34800,
          34900, 35000, 35100, 35200, 35300, 35400, 35500, 35600, 35700, 35800, 35900, 36000, 36100, 36200, 36300,
          36400, 36500, 36600, 36700, 36800, 36900, 37000, 37100, 37200, 37300, 37400, 37500, 37600, 37700, 37800,
          37900, 38000, 38100, 38200, 38300, 38400, 38500, 38600, 38700, 38800, 38900, 39000, 39100, 39200, 39300,
          39400, 39500, 39600, 39700, 39800, 39900, 40000, 40100, 40200, 40300, 40400, 40500, 40600, 40700, 40800,
          40900, 41000, 41100, 41200, 41300, 41400, 41500, 41600, 41700, 41800, 41900, 42000, 42100, 42200, 42300,
          42400, 42500, 42600, 42700, 42800, 42900, 43000, 43100, 43200, 43300, 43400, 43500, 43600, 43700, 43800,
          43900, 44000, 44100, 44200, 44300, 44400, 44500, 44600, 44700, 44800, 44900, 45000, 45100, 45200, 45300,
          45400, 45500, 45600, 45700, 45800, 45900, 46000, 46100, 46200, 46300, 46400, 46500, 46600, 46700, 46800,
          46900, 47000, 47100, 47200, 47300, 47400, 47500, 47600, 47700, 47800, 47900, 48000, 48100, 48200, 48300,
          48400, 48500, 48600, 48700, 48800, 48900, 49000, 49100, 49200, 49300, 49400, 49500, 49600, 49700, 49800,
          49900, 50000]
    domin_level5 = domin_level_of_particle1_to_node100
    domin_level6 = domin_level_of_particle2_to_node100
    domin_level7 = domin_level_of_particle3_to_node100
    domin_level8 = domin_level_of_particle4_to_node100
    plt.plot(t2, domin_level5, '.', label='particle1')
    plt.plot(t2, domin_level6, '.', label='particle2')
    plt.plot(t2, domin_level7, '.', label='particle3')
    plt.plot(t2, domin_level8, '.', label='particle4')
    plt.legend()
    plt.xlabel('iteration Time')
    plt.ylabel('Domin level')
    plt.title('Domin level analysis of node100')
    plt.show()
